#! /usr/bin/node

var cluster = require('cluster');
var fs = require('fs');
var os = require('os');

var LoggerDriver = require('./driver/loggers');

(function(){

    // Require need libs for daemon

    var cpusCount = os.cpus().length,
        processWorkersCount = cpusCount,
        loggerProcess = null,
        loggerErrors = null,
        config = {};

    /**
     * Get common config object (use when SIGHUP also)
     * @returns {*}
     */
    function parseConfig() {

        try {
            var configFile = fs.readFileSync('./../configs/config.json', { 'flag' : 'r' });
        } catch (e) {
            var configFile = fs.readFileSync('./configs/config.json', { 'flag' : 'r' });
        }

        config = JSON.parse(configFile);

        // defautl values
        if (config.daemon.workers.process) {
            processWorkersCount = config.daemon.workers.process;
        }

        loggerProcess = LoggerDriver.forge(
            config.loggers.process.type,
            config.loggers.process.options
        );
        loggerErrors = LoggerDriver.forge(
            config.loggers.errors.type,
            config.loggers.errors.options
        );
    }

    /**
     * Creates a new worker when running as cluster master.
     * Runs the Crystal Interest Bot otherwisworkerse.
     */
    function createProcessWorker() {
        if (cluster.isMaster) {
            // Fork a worker if running as cluster master
            var child = cluster.fork();

            // Respawn the child process after exit
            // (ex. in case of an uncaught exception)
            child.on('exit', function (code, signal) {
                createProcessWorker();
            });
        } else {
            require('./../' + config.daemon.workers.script);
        }
    }

    /**
     * Creates the specified number of workers.
     * @param  {Number} n Number of workers to create.
     */
    function createWorkers() {
        var n = processWorkersCount;
        while (n-- > 0) {
            createProcessWorker();
        }
    }

    /**
     * Kills all workers with the given signal.
     * Also removes all event listeners from workers before sending the signal
     * to prevent respawning.
     * @param  {Number} signal
     */
    function killAllWorkers(signal) {
        var uniqueID, worker;

        for (uniqueID in cluster.workers) {
            if (cluster.workers.hasOwnProperty(uniqueID)) {
                worker = cluster.workers[uniqueID];
                worker.removeAllListeners();
                worker.process.kill(signal);
            }
        }
    }

    /**
     * Restarts the workers.
     */
    process.on('SIGHUP', function () {

        parseConfig();
        loggerProcess.info('***** DAEMON RELOAD START *****');

        killAllWorkers('SIGTERM');

        var t = setTimeout(function(){
            createWorkers();
            loggerProcess.info('***** DAEMON RELOAD COMPLETE *****');
            clearTimeout(t);
        }, 1000);

    });

    /**
     * Gracefully Shuts down the workers.
     */
    process.on('SIGTERM', function () {
        killAllWorkers('SIGTERM');
    });

    parseConfig();

    // run, Forest, run!
    loggerProcess.info('***** PROCESS START *****');
    createWorkers();
})();